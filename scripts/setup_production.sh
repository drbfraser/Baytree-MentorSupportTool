#!/bin/bash
# This script can be run on a fresh VM to install and run the project on a production server

RED='\033[1;31m'
BLUE='\033[1;36m'
COLOR_OFF='\033[0m'

# exit if there is a failed command
set -e

echo -e "${BLUE}"
echo -e "Baytree Centre - Mentor Support Tool Server: Deployment Script"
echo -e "This script must be run as root or with sudo. It is only supported on Ubuntu Server 22.04."
echo -e "It install the config and deployment files in /root/baytree/"
echo -e "${COLOR_OFF}${RED}"
echo -e "WARNING: If run on an existing Baytree instance, this will likely delete data."
read -p "Continue (y/n)? " CONT
echo -e "${COLOR_OFF}"

if [ "$CONT" != "y" ]; then
    exit 0
fi


echo -e "${BLUE}Updating, upgrading, and installing required packages...${COLOR_OFF}\n"


# TODO: UPDATE TO BETTER INSTALL METHOD
# https://docs.docker.com/engine/install/ubuntu/
apt update -y
apt upgrade -y
apt install git docker.io docker-compose -y


echo -e "\n${BLUE}Starting the Docker service and setting Docker to automatically start at boot${COLOR_OFF}\n"

systemctl start docker
systemctl enable docker

if [ ! -f ~/.ssh/id_ed25519.pub ]; then
    echo -e "\n${BLUE}Generating SSH key...${COLOR_OFF}\n"
    ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -q -N ""
fi


echo -e "\n${BLUE}Clone code from GitHub...${COLOR_OFF}\n"

cd ~
if [ ! -d baytree ]; then
    git clone https://github.com/drbfraser/Baytree-MentorSupportTool.git baytree
fi    
cd ~/baytree/
git pull
git checkout production


echo -e "\n${BLUE}Linking update script into /root/update.sh...${COLOR_OFF}\n"

ln -s ~/baytree/scripts/update.sh ~/update.sh


# .env file creation
if [ ! -f .env ]; then
    echo -e "\n${BLUE}Please enter the domain for this Baytree Server installation (blank to use IP over HTTP only):${COLOR_OFF}"
    RAND_PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)
    RAND_SECRET=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)
    read;
    echo "# Configuration generated by install script (`date`)" > .env
    echo "DOMAIN=${REPLY:-:80}" >> .env
    echo "SECRET_KEY=${RAND_SECRET}" >> .env
    # echo "MYSQL_HOST=baytree_database" >> .env  # Needed? It's in the docker-compose.yml but not in README for .env
    echo "MYSQL_DATABASE=baytree" >> .env
    echo "MYSQL_USER=dbuser" >> .env
    echo "MYSQL_PASSWORD=${RAND_PASSWORD}" >> .env
    echo "" >> .env
    echo "EMAIL_HOST=smtp.gmail.com" >> .env
    echo "EMAIL_PORT=587" >> .env
    echo "EMAIL_USER=here_is_the_account@gmail.com" >> .env
    echo "EMAIL_PASSWORD=here_is_the_email_account_password" >> .env
    echo "" >> .env
    echo "VIEWS_USERNAME=here_is_the_views_username" >> .env
    echo "VIEWS_PASSWORD=here_is_the_views_password" >> .env

    # Manual edit for rest of config
    echo -e "\n${BLUE}Next, you must enter a number of additional configuration parameters.${COLOR_OFF}"
    echo -e "${BLUE}In the text editor, change any value that starts with 'here_is_the_'....${COLOR_OFF}"
    echo -e "${BLUE}When finished editing, press CTRL-X, press y, then press ENTER.${COLOR_OFF}"
    read;
    nano .env

    # this is necessary because the MySQL password has now been changed
    echo -e "\n${BLUE}Removing previous Docker containers and volumes...${COLOR_OFF}\n"
    docker-compose -f docker-compose.yml -f docker-compose.deploy.yml down
    docker volume prune -f
fi


echo -e "\n${BLUE}Downloading Docker images and spinning up Docker containers...${COLOR_OFF}\n"

# Version of the form v2022-12-31.abcd5678, based on date and short SHA1 of last commit on branch
export COMMIT_SHA=`git show -s --format=%H`
export IMAGE_TAG=v`git show -s --format=%cs $COMMIT_SHA`.`git rev-parse --short=8 $COMMIT_SHA`
echo "Most recent Git commit SHA: $COMMIT_SHA"
echo "Release tag:                $IMAGE_TAG"
docker-compose -f docker-compose.yml -f docker-compose.deploy.yml up -d


echo -e "\n${BLUE}Waiting for MySQL to start...${COLOR_OFF}"
sleep 10;


echo -e "${BLUE}Upgrading database schema...${COLOR_OFF}\n"
docker exec baytree_server python manage.py migrate

echo "TODO: Figure out how to seed data (if any?)"

# echo -e "\n${BLUE}"
# echo -e "Data seeding options:"
# echo -e "   0: No data seeding"
# echo -e "   1: seed_minimal"
# echo -e "   2: seed_test_data"
# echo -e "   3: seed\n"
# read -p "Enter an option: " OPTION
# echo -e "${COLOR_OFF}"

# case $OPTION in
#     1)
#         docker exec cradle_flask python ./manage.py seed_minimal
#         ;;
#     2)
#         docker exec cradle_flask python ./manage.py seed_test_data
#         ;;
#     3)
#         docker exec cradle_flask python ./manage.py seed
#         ;;
# esac

echo -e "\n${BLUE}Finished${COLOR_OFF}\n"